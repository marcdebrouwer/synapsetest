{
	"name": "FacilityEgridDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "FacilityData"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "EgridData"
				}
			],
			"sinks": [
				{
					"name": "MapEgrid"
				},
				{
					"name": "MapCountry"
				},
				{
					"name": "MapFacilityType"
				}
			],
			"transformations": [
				{
					"name": "DistinctFacilityType"
				},
				{
					"name": "DistinctCountry"
				},
				{
					"name": "CountryKey"
				},
				{
					"name": "FacilityTypeKey"
				},
				{
					"name": "EgridKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Company as string,",
				"          Region as string,",
				"          OpCo as string,",
				"          Brand as string,",
				"          {Facility Type} as string,",
				"          {Facility ID} as integer,",
				"          {Facility Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          {State } as string,",
				"          Country as string,",
				"          {Postal Code} as string,",
				"          {Gross area owned stores ft2} as integer,",
				"          {Sales area owned stores ft2} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Facility.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> FacilityData",
				"source(output(",
				"          Zipcode as string,",
				"          EgridRegion as string,",
				"          {DimEgridRegions.eGrid Subregion_1} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'EgridRegion.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> EgridData",
				"FacilityData aggregate(groupBy({Facility Type}),",
				"     each(match(name != \"Facility Type\"), $$ = first($$))) ~> DistinctFacilityType",
				"FacilityData aggregate(groupBy(Country),",
				"     each(match(name != \"Country\"), $$ = first($$))) ~> DistinctCountry",
				"DistinctCountry keyGenerate(output(CountryId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CountryKey",
				"DistinctFacilityType keyGenerate(output(FacilityTypeId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> FacilityTypeKey",
				"EgridData keyGenerate(output(EgridDataId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> EgridKey",
				"EgridKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ADESG3NF',",
				"     tableName: 'EgridRegion',",
				"     input(",
				"          EgridRegionId as integer,",
				"          EgridRegionName as string,",
				"          EgridRegionZipcode as string",
				"     ),",
				"     mapColumn(",
				"          EgridRegionId = EgridDataId,",
				"          EgridRegionName = EgridRegion,",
				"          EgridRegionZipcode = Zipcode",
				"     )) ~> MapEgrid",
				"CountryKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ADESG3NF',",
				"     tableName: 'Country',",
				"     input(",
				"          CountryId as integer,",
				"          IsoCountryName as string",
				"     ),",
				"     mapColumn(",
				"          CountryId,",
				"          IsoCountryName = Country",
				"     )) ~> MapCountry",
				"FacilityTypeKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ADESG3NF',",
				"     tableName: 'FacilityType',",
				"     input(",
				"          FacilityTypeId as integer,",
				"          FacilityTypeName as string,",
				"          FacilityTypeDescription as string",
				"     ),",
				"     mapColumn(",
				"          FacilityTypeId,",
				"          FacilityTypeName = {Facility Type}",
				"     )) ~> MapFacilityType"
			]
		}
	}
}