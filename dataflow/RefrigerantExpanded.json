{
	"name": "RefrigerantExpanded",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "Charge"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "Leakage"
				},
				{
					"name": "FacilitySSGF"
				},
				{
					"name": "FacilityRest"
				},
				{
					"name": "BannerData"
				},
				{
					"name": "PurchasedGasData"
				},
				{
					"name": "VirtualEmissionsData"
				},
				{
					"name": "EmissionFactorData"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "split"
				},
				{
					"name": "split2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "toInteger1"
				},
				{
					"name": "toInteger2"
				},
				{
					"name": "toInteger3"
				},
				{
					"name": "toInteger4"
				},
				{
					"name": "joinSSGF"
				},
				{
					"name": "joinRest"
				},
				{
					"name": "filterSSGF"
				},
				{
					"name": "filterRest"
				},
				{
					"name": "joinFacility1"
				},
				{
					"name": "joinFacility2"
				},
				{
					"name": "joinFacility3"
				},
				{
					"name": "joinFacility4"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "union2"
				},
				{
					"name": "AdditionalColumns"
				},
				{
					"name": "AdditionalColumns2"
				},
				{
					"name": "union3"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "joinPurchasedGas"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Location as string,",
				"          {Tag ID} as string,",
				"          {Rack Type} as string,",
				"          {Refrigerant Type} as string,",
				"          {Total Charge} as double '000,000,000.000',",
				"          {Primary Trade} as string,",
				"          Brand as string,",
				"          {Model No.} as string,",
				"          {Serial No.} as string,",
				"          {Facility Name} as string,",
				"          Deactivated as boolean,",
				"          {Rack Id} as string,",
				"          {Asset Type} as string,",
				"          Banner as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Refrigerants.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Charge",
				"source(output(",
				"          StoreId as string,",
				"          {Tag ID} as string,",
				"          {Quantity added(lbs)} as double '000,000,000.000',",
				"          {Refrigerant type} as string,",
				"          {REFRIG TYPE} as string,",
				"          {Tracking number} as integer,",
				"          Vendor as string,",
				"          {Part use date} as string,",
				"          {Refrigerant Use Reason} as string,",
				"          {Leak event date} as string,",
				"          {Inventory LocationId} as integer,",
				"          AssetId as integer,",
				"          LeakId as integer,",
				"          Banner as string,",
				"          charge as string,",
				"          R134A as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'RefrigerantLeakage.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Leakage",
				"source(output(",
				"          FacilityId as integer,",
				"          FacilityName as string,",
				"          LocationId as integer,",
				"          GrossFloorArea as integer,",
				"          AvailableSellingArea as integer,",
				"          FacilityTypeId as integer,",
				"          BannerId as integer,",
				"          FacilityNumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Facility') ~> FacilitySSGF",
				"source(output(",
				"          FacilityId as integer,",
				"          FacilityName as string,",
				"          LocationId as integer,",
				"          GrossFloorArea as integer,",
				"          AvailableSellingArea as integer,",
				"          FacilityTypeId as integer,",
				"          BannerId as integer,",
				"          FacilityNumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Facility') ~> FacilityRest",
				"source(output(",
				"          BannerId as integer,",
				"          BannerName as string,",
				"          OrganizationId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Banner') ~> BannerData",
				"source(output(",
				"          PurchasedGasId as integer,",
				"          PurchasedGasName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'PurchasedGas') ~> PurchasedGasData",
				"source(output(",
				"          VirtualEmissionId as integer,",
				"          PurchasedGasId as integer,",
				"          Date as date,",
				"          VirtualEmissionScope as string,",
				"          BannerId as integer,",
				"          VirtualEmissionFactorLocation as double,",
				"          VirtualEmissionFactorMarket as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'VirtualEmissionFactor') ~> VirtualEmissionsData",
				"source(output(",
				"          EmissionFactorId as integer,",
				"          EmissionFactorName as string,",
				"          EmissionScope as string,",
				"          EmissionCategory as string,",
				"          EmissionFactorLocationBased as double,",
				"          EmissionFactorMarketBased as double,",
				"          UnitOfMeasure as string,",
				"          EmissionStartDate as date,",
				"          EmissionEndDate as date,",
				"          EgridRegion as string,",
				"          PurchasedGasId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'GreenhouseGasType') ~> EmissionFactorData",
				"Charge split(case(    Banner == \"Giant\", true(),     Banner == \"Stop and Shop\", true()),",
				"     disjoint: false) ~> split@(SSandGiant, Rest)",
				"Leakage split(case(    Banner == \"SS\", true(),     Banner == \"GF\", true()),",
				"     disjoint: false) ~> split2@(SSandGiant2, Therest2)",
				"split@SSandGiant derive(Location = replace(Location,\"SS\",'')) ~> derivedColumn1",
				"derivedColumn1 derive(Location = replace(Location,\"GF\",'')) ~> derivedColumn2",
				"split2@SSandGiant2 derive(StoreId = replace(StoreId,\"SS\",'')) ~> derivedColumn3",
				"derivedColumn3 derive(StoreId = replace(StoreId,\"GF\",'')) ~> derivedColumn4",
				"derivedColumn2 derive(Location = toInteger(Location)) ~> toInteger1",
				"split@Rest derive(Location = toInteger({Location})) ~> toInteger2",
				"derivedColumn4 derive(StoreId = toInteger(StoreId)) ~> toInteger3",
				"split2@Therest2 derive(StoreId = toInteger(StoreId)) ~> toInteger4",
				"FacilitySSGF, BannerData join(FacilitySSGF@BannerId == BannerData@BannerId,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinSSGF",
				"FacilityRest, BannerData join(FacilityRest@BannerId == BannerData@BannerId,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinRest",
				"joinSSGF filter(BannerName == \"Stop and Shop\"|| BannerName == \"Giant\") ~> filterSSGF",
				"joinRest filter(BannerName != \"Stop and Shop\" && BannerName != \"Giant\") ~> filterRest",
				"toInteger1, filterSSGF join(Location == FacilityNumber,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinFacility1",
				"toInteger2, filterRest join(Location == FacilityNumber,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinFacility2",
				"toInteger3, filterSSGF join(StoreId == FacilityNumber,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinFacility3",
				"toInteger4, filterRest join(StoreId == FacilityNumber,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinFacility4",
				"joinFacility1 select(mapColumn(",
				"          Location,",
				"          RefrigerantType = {Refrigerant Type},",
				"          FacilityId,",
				"          BannerName,",
				"          UnitsLBS = {Total Charge}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"joinFacility2 select(mapColumn(",
				"          Location,",
				"          RefrigerantType = {Refrigerant Type},",
				"          UnitsLBS = {Total Charge},",
				"          FacilityId,",
				"          BannerName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 union(byName: true)~> union1",
				"joinFacility3 select(mapColumn(",
				"          Location = StoreId,",
				"          UnitsLBS = {Quantity added(lbs)},",
				"          RefrigerantType = {REFRIG TYPE},",
				"          Vendor,",
				"          Status = {Refrigerant Use Reason},",
				"          FacilityId,",
				"          BannerName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"joinFacility4 select(mapColumn(",
				"          Location = StoreId,",
				"          UnitsLBS = {Quantity added(lbs)},",
				"          RefrigerantType = {REFRIG TYPE},",
				"          Vendor,",
				"          Status = {Refrigerant Use Reason},",
				"          FacilityId,",
				"          BannerName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select3, select4 union(byName: true)~> union2",
				"union1 derive(Category = \"Charge\",",
				"          Date = toDate(\"01-10-2021\",'dd-MM-yyyy'),",
				"          Status = \"\",",
				"          Vendor = \"\") ~> AdditionalColumns",
				"union2 derive(Category = \"Leakage\",",
				"          Date = toDate(\"01-10-2021\",'dd-MM-yyyy')) ~> AdditionalColumns2",
				"AdditionalColumns, AdditionalColumns2 union(byName: true)~> union3",
				"union3 derive(UnitsKG = UnitsLBS*0.4536) ~> derivedColumn5",
				"derivedColumn5, PurchasedGasData join(RefrigerantType == PurchasedGasName,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinPurchasedGas"
			]
		}
	}
}