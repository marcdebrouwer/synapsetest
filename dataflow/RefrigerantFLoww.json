{
	"name": "RefrigerantFLoww",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "RefrigerantChargeData"
				},
				{
					"name": "FacilityData"
				},
				{
					"name": "VirtualEmissionFactorData"
				},
				{
					"name": "EmissionFactorData"
				},
				{
					"name": "PurchasedEnergyData"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "RefrigerantLeakageData"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "RemoveGF"
				},
				{
					"name": "RemoveSS"
				},
				{
					"name": "joinLocation"
				},
				{
					"name": "joinPurchasedEnergy"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "CalculateKG"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "joinVirtualEmissionFactor"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Location as string,",
				"          {Tag ID} as string,",
				"          {Rack Type} as string,",
				"          {Refrigerant Type} as string,",
				"          {Total Charge} as integer,",
				"          {Primary Trade} as string,",
				"          Brand as string,",
				"          {Model No.} as string,",
				"          {Serial No.} as string,",
				"          {Facility Name} as string,",
				"          Deactivated as boolean,",
				"          {Rack Id} as string,",
				"          {Asset Type} as string,",
				"          Banner as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Refrigerants.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> RefrigerantChargeData",
				"source(output(",
				"          FacilityId as integer,",
				"          FacilityName as string,",
				"          LocationId as integer,",
				"          GrossFloorArea as integer,",
				"          AvailableSellingArea as integer,",
				"          FacilityTypeId as integer,",
				"          BannerId as integer,",
				"          FacilityNumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Facility') ~> FacilityData",
				"source(output(",
				"          VirtualEmissionId as integer,",
				"          PurchasedGasId as integer,",
				"          Date as date,",
				"          VirtualEmissionScope as string,",
				"          BannerId as integer,",
				"          VirtualEmissionFactorLocation as double,",
				"          VirtualEmissionFactorMarket as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'VirtualEmissionFactor') ~> VirtualEmissionFactorData",
				"source(output(",
				"          EmissionFactorId as integer,",
				"          EmissionFactorName as string,",
				"          EmissionScope as string,",
				"          EmissionCategory as string,",
				"          EmissionFactorLocationBased as double,",
				"          EmissionFactorMarketBased as double,",
				"          UnitOfMeasure as string,",
				"          EmissionStartDate as date,",
				"          EmissionEndDate as date,",
				"          EgridRegion as string,",
				"          PurchasedGasId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'GreenhouseGasType') ~> EmissionFactorData",
				"source(output(",
				"          PurchasedGasId as integer,",
				"          PurchasedGasName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'PurchasedGas') ~> PurchasedEnergyData",
				"source(output(",
				"          StoreId as string,",
				"          {Tag ID} as string,",
				"          {Quantity added(lbs)} as string,",
				"          {Refrigerant type} as string,",
				"          {REFRIG TYPE} as string,",
				"          {Tracking number} as integer,",
				"          Vendor as string,",
				"          {Part use date} as string,",
				"          {Refrigerant Use Reason} as string,",
				"          {Leak event date} as string,",
				"          {Inventory LocationId} as integer,",
				"          AssetId as integer,",
				"          LeakId as integer,",
				"          Banner as string,",
				"          charge as string,",
				"          R134A as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'RefrigerantLeakage.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> RefrigerantLeakageData",
				"RefrigerantChargeData derive(Location = replace(Location,'GF','')) ~> RemoveGF",
				"RemoveGF derive(Location = replace(Location,'SS','')) ~> RemoveSS",
				"derivedColumn2, FacilityData join(Location === FacilityNumber,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinLocation",
				"joinLocation, PurchasedEnergyData join({Refrigerant Type} == PurchasedGasName,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinPurchasedEnergy",
				"select1 derive(Date = toDate(\"01-10-2021\",'dd-MM-yyyy')) ~> derivedColumn1",
				"RemoveSS derive(CalculateKG = {Total Charge}*0.4536) ~> CalculateKG",
				"joinPurchasedEnergy select(mapColumn(",
				"          {Refrigerant Type},",
				"          {Total Charge},",
				"          {Facility Name},",
				"          Banner,",
				"          CalculateKG,",
				"          FacilityId,",
				"          PurchasedGasId,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CalculateKG derive(Location = toInteger(Location)) ~> derivedColumn2",
				"derivedColumn1, VirtualEmissionFactorData join(derivedColumn1@Date == VirtualEmissionFactorData@Date",
				"     && select1@PurchasedGasId == VirtualEmissionFactorData@PurchasedGasId,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinVirtualEmissionFactor",
				"joinVirtualEmissionFactor, EmissionFactorData join(derivedColumn1@Date == EmissionStartDate",
				"     && select1@PurchasedGasId == EmissionFactorData@PurchasedGasId,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Total Charge},",
				"          CalculateKG,",
				"          FacilityId,",
				"          PurchasedGasId = select1@PurchasedGasId,",
				"          Date = derivedColumn1@Date,",
				"          VirtualEmissionId,",
				"          PurchasedGasId = VirtualEmissionFactorData@PurchasedGasId,",
				"          EmissionFactorId,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 keyGenerate(output(RefrigerantId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'DirectEmissionsFromRefrigeration',",
				"     input(",
				"          RefrigerantId as integer,",
				"          PeriodStart as date,",
				"          PeriodEnd as date,",
				"          FuelMassVolumeUnitsLb as double,",
				"          C02EmissionsUnits as double,",
				"          PurchasedEnergyId as integer,",
				"          EmissionFactorId as integer,",
				"          FacilityId as integer,",
				"          FuelMassKg as double,",
				"          VirtualEmissionFactorId as integer,",
				"          RefrigerantNumber as integer",
				"     ),",
				"     mapColumn(",
				"          RefrigerantId,",
				"          FacilityId,",
				"          PeriodStart = Date,",
				"          PurchasedEnergyId = PurchasedGasId,",
				"          EmissionFactorId,",
				"          VirtualEmissionFactorId = VirtualEmissionId,",
				"          FuelMassKg = CalculateKG,",
				"          FuelMassVolumeUnitsLb = {Total Charge},",
				"          RefrigerantNumber = Location",
				"     )) ~> sink1"
			]
		}
	}
}