{
	"name": "PurchasedFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "PurchasedEnergyData"
				}
			],
			"sinks": [
				{
					"name": "PurchasedMapping"
				}
			],
			"transformations": [
				{
					"name": "CreateEnergyKey"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CarbonScope as string,",
				"          EmissionCategory as string,",
				"          EmissionType as string,",
				"          EmissionFactorLocationBased as string,",
				"          EmissionFactorMarketBased as string,",
				"          UnitOfMeasure as string,",
				"          StartDate as date,",
				"          EndDate as date,",
				"          Region as string,",
				"          HasMarketBasedFactor as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'EmissionFactors.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> PurchasedEnergyData",
				"aggregate1 keyGenerate(output(PurchasedEnergyId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CreateEnergyKey",
				"PurchasedEnergyData aggregate(groupBy(EmissionType),",
				"     each(match(name!=\"EmissionType\"), $$ = first($$))) ~> aggregate1",
				"CreateEnergyKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'PurchasedGas',",
				"     input(",
				"          PurchasedGasId as integer,",
				"          PurchasedGasName as string",
				"     ),",
				"     mapColumn(",
				"          PurchasedGasId = PurchasedEnergyId,",
				"          PurchasedGasName = EmissionType",
				"     )) ~> PurchasedMapping"
			]
		}
	}
}