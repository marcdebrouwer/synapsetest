{
	"name": "FacilityDataMap",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "FacilityData"
				}
			],
			"sinks": [
				{
					"name": "MapFacilityType"
				},
				{
					"name": "MapCountry"
				},
				{
					"name": "MapOrganization"
				}
			],
			"transformations": [
				{
					"name": "DistinctFacilityType"
				},
				{
					"name": "CreateFacilityKey"
				},
				{
					"name": "DistinctCountry"
				},
				{
					"name": "CreateCountryKey"
				},
				{
					"name": "DistinctOrganization"
				},
				{
					"name": "CreateOrganizationKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Company as string,",
				"          Region as string,",
				"          OpCo as string,",
				"          Brand as string,",
				"          {Facility Type} as string,",
				"          {Facility ID} as short,",
				"          {Facility Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          {State } as string,",
				"          Country as string,",
				"          {Postal Code} as string,",
				"          {Gross area owned stores ft2} as integer,",
				"          {Sales area owned stores ft2} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Facility.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> FacilityData",
				"FacilityData aggregate(groupBy({Facility Type}),",
				"     each(match(name!=\"Facility Type\"), $$ = first($$))) ~> DistinctFacilityType",
				"DistinctFacilityType keyGenerate(output(FacilityTypeId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CreateFacilityKey",
				"FacilityData aggregate(groupBy(Country),",
				"     each(match(name!=\"Country\"), $$ = first($$))) ~> DistinctCountry",
				"DistinctCountry keyGenerate(output(CountryId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CreateCountryKey",
				"FacilityData aggregate(groupBy(Company),",
				"     each(match(name!=\"Company\"), $$ = first($$))) ~> DistinctOrganization",
				"DistinctOrganization keyGenerate(output(OrganizationId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CreateOrganizationKey",
				"CreateFacilityKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'FacilityType',",
				"     recreate:true,",
				"     input(",
				"          FacilityTypeId as integer,",
				"          FaciityTypeName as string",
				"     ),",
				"     mapColumn(",
				"          FacilityTypeId,",
				"          FaciityTypeName = {Facility Type}",
				"     )) ~> MapFacilityType",
				"CreateCountryKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Country',",
				"     recreate:true,",
				"     input(",
				"          CountryId as integer,",
				"          IsoCountryName as string",
				"     ),",
				"     mapColumn(",
				"          CountryId,",
				"          IsoCountryName = Country",
				"     )) ~> MapCountry",
				"CreateOrganizationKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'PartyOrganization',",
				"     recreate:true,",
				"     input(",
				"          OrganizationId as integer,",
				"          OrganizationName as string",
				"     ),",
				"     mapColumn(",
				"          OrganizationId,",
				"          OrganizationName = Company",
				"     )) ~> MapOrganization"
			]
		}
	}
}