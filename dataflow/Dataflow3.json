{
	"name": "Dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "OrganizationData"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "BannerDate"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LocationData"
				}
			],
			"sinks": [
				{
					"name": "MapBanner"
				},
				{
					"name": "MapLocation"
				}
			],
			"transformations": [
				{
					"name": "DistinctBanners"
				},
				{
					"name": "CreateBannerId"
				},
				{
					"name": "LookUpOrganizationId"
				},
				{
					"name": "DistinctLocation"
				},
				{
					"name": "DistinctFacilityType"
				},
				{
					"name": "CreateLocationId"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrganizationId as integer,",
				"          OrganizationName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ADESG3NF',",
				"     tableName: 'Organization') ~> OrganizationData",
				"source(output(",
				"          Company as string,",
				"          Region as string,",
				"          OpCo as string,",
				"          Brand as string,",
				"          {Facility Type} as string,",
				"          {Facility ID} as integer,",
				"          {Facility Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          {State } as string,",
				"          Country as string,",
				"          {Postal Code} as string,",
				"          {Gross area owned stores ft2} as integer,",
				"          {Sales area owned stores ft2} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Facility.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> BannerDate",
				"source(output(",
				"          Company as string,",
				"          Region as string,",
				"          OpCo as string,",
				"          Brand as string,",
				"          {Facility Type} as string,",
				"          {Facility ID} as integer,",
				"          {Facility Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          {State } as string,",
				"          Country as string,",
				"          {Postal Code} as string,",
				"          {Gross area owned stores ft2} as integer,",
				"          {Sales area owned stores ft2} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Facility.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> LocationData",
				"BannerDate aggregate(groupBy(OpCo),",
				"     each(match(name!=\"OpCo\"), $$ = first($$))) ~> DistinctBanners",
				"DistinctBanners keyGenerate(output(BannerId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CreateBannerId",
				"CreateBannerId, OrganizationData lookup(Company == OrganizationName,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(OrganizationId, true),",
				"     broadcast: 'auto')~> LookUpOrganizationId",
				"LocationData aggregate(groupBy({Facility Name}),",
				"     each(match(name!=\"Facility Name\"), $$ = first($$))) ~> DistinctLocation",
				"LocationData aggregate(groupBy({Facility Type}),",
				"     each(match(name!=\"Facility Type\"), $$ = first($$))) ~> DistinctFacilityType",
				"DistinctLocation keyGenerate(output(LocationId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> CreateLocationId",
				"LookUpOrganizationId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ADESG3NF',",
				"     tableName: 'BannerId',",
				"     input(",
				"          BannerId as integer,",
				"          BannerName as string,",
				"          OrganizationId as integer",
				"     ),",
				"     mapColumn(",
				"          BannerId,",
				"          BannerName = OpCo,",
				"          OrganizationId",
				"     )) ~> MapBanner",
				"CreateLocationId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ADESG3NF',",
				"     tableName: 'Location',",
				"     input(",
				"          LocationId as integer,",
				"          LocationName as string,",
				"          LocationAddressLine1 as string,",
				"          LocationCity as string,",
				"          LocationStateId as integer,",
				"          LocationZipCode as decimal(11,0),",
				"          CountryId as integer,",
				"          LocationEgridRegionId as integer",
				"     ),",
				"     mapColumn(",
				"          LocationId,",
				"          LocationName = {Facility Name},",
				"          LocationAddressLine1 = Address,",
				"          LocationCity = City,",
				"          LocationZipCode = {Postal Code},",
				"          LocationEgridRegionId = {Facility Type}",
				"     )) ~> MapLocation"
			]
		}
	}
}