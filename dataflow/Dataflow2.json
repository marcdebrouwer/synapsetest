{
	"name": "Dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AholdEnergy"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "DelhaizeEnergy"
				},
				{
					"name": "FacilityData"
				},
				{
					"name": "VirtualEmissionsData"
				},
				{
					"name": "EmissionFactorData"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "Facility2Data"
				},
				{
					"name": "BannerData"
				},
				{
					"name": "LocationData"
				},
				{
					"name": "PurchasedGasData"
				},
				{
					"name": "EgridRegionData"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "unpivot1"
				},
				{
					"name": "unpivot2"
				},
				{
					"name": "CommaToPoint"
				},
				{
					"name": "MakeDouble"
				},
				{
					"name": "CommaToPoint2"
				},
				{
					"name": "MakeDouble2"
				},
				{
					"name": "AppendData"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "LookUpFacility"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "LookupPurchasedGas"
				},
				{
					"name": "join1"
				},
				{
					"name": "SelectFacilityData"
				},
				{
					"name": "LookupGasId"
				},
				{
					"name": "LookupEmissionFactor"
				},
				{
					"name": "LookUpEgridId"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Facility Name} as string,",
				"          {Location ID} as short,",
				"          {Selling m2} as string,",
				"          {Facility Type} as string,",
				"          Electric as string,",
				"          {Natural Gas} as string,",
				"          Propane as string,",
				"          {Fuel Oil} as string,",
				"          {Solar Used On-Site} as string,",
				"          EFEC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'AholdEnergy.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AholdEnergy",
				"source(output(",
				"          {Facility Name} as string,",
				"          {Location ID} as short,",
				"          {Selling m2} as string,",
				"          {Facility Type} as string,",
				"          Electric as string,",
				"          {Natural Gas} as string,",
				"          Propane as string,",
				"          {Fuel Oil} as string,",
				"          EFEC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'DelhaizeEnergy.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DelhaizeEnergy",
				"source(output(",
				"          FacilityId as integer,",
				"          FacilityName as string,",
				"          LocationId as integer,",
				"          GrossFloorArea as integer,",
				"          AvailableSellingArea as integer,",
				"          FacilityTypeId as integer,",
				"          BannerId as integer,",
				"          FacilitySub as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Facility') ~> FacilityData",
				"source(output(",
				"          VirtualEmissionId as integer,",
				"          PurchasedGasId as integer,",
				"          Date as date,",
				"          VirtualEmissionScope as string,",
				"          BannerId as integer,",
				"          VirtualEmissionFactorLocation as double,",
				"          VirtualEmissionFactorMarket as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'VirtualEmissionFactor') ~> VirtualEmissionsData",
				"source(output(",
				"          EmissionFactorId as integer,",
				"          EmissionFactorName as string,",
				"          EmissionScope as string,",
				"          EmissionCategory as string,",
				"          EmissionFactorLocationBased as double,",
				"          EmissionFactorMarketBased as double,",
				"          UnitOfMeasure as string,",
				"          EmissionStartDate as date,",
				"          EmissionEndDate as date,",
				"          EgridRegion as string,",
				"          PurchasedGasId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'EmissionFactors') ~> EmissionFactorData",
				"source(output(",
				"          Company as string,",
				"          Region as string,",
				"          OpCo as string,",
				"          Brand as string,",
				"          {Facility Type} as string,",
				"          {Facility ID} as short,",
				"          {Facility Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          {State } as string,",
				"          Country as string,",
				"          {Postal Code} as string,",
				"          {Gross area owned stores ft2} as integer,",
				"          {Sales area owned stores ft2} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Facility.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Facility2Data",
				"source(output(",
				"          BannerId as integer,",
				"          BannerName as string,",
				"          OrganizationId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Banner') ~> BannerData",
				"source(output(",
				"          LocationId as integer,",
				"          LocationName as string,",
				"          LocationAddressLine1 as string,",
				"          LocationCity as string,",
				"          LocationState as string,",
				"          LocationZipCode as string,",
				"          CountryId as integer,",
				"          EgridRegionId as integer,",
				"          LocationNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Location') ~> LocationData",
				"source(output(",
				"          PurchasedGasId as integer,",
				"          PurchasedGasName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'PurchasedGas') ~> PurchasedGasData",
				"source(output(",
				"          EgridRegionId as integer,",
				"          EgridRegionName as string,",
				"          EGridRegionLongName as string,",
				"          EgridZipcode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'EgridRegions') ~> EgridRegionData",
				"MakeDouble unpivot(output(",
				"          EnergyType as string,",
				"          Amount as double",
				"     ),",
				"     ungroupBy({Facility Name},",
				"          {Location ID},",
				"          {Selling m2},",
				"          {Facility Type}),",
				"     lateral: true,",
				"     ignoreNullPivots: true) ~> unpivot1",
				"MakeDouble2 unpivot(output(",
				"          EnergyType as string,",
				"          Amount as double",
				"     ),",
				"     ungroupBy({Facility Name},",
				"          {Facility Type},",
				"          {Location ID},",
				"          {Selling m2}),",
				"     lateral: true,",
				"     ignoreNullPivots: true) ~> unpivot2",
				"AholdEnergy derive(Electric = replace({Electric}, \",\", \".\"),",
				"          {Natural Gas} = replace({Natural Gas}, \",\", \".\"),",
				"          Propane = replace({Propane}, \",\", \".\"),",
				"          {Fuel Oil} = replace({Fuel Oil}, \",\", \".\"),",
				"          {Solar Used On-Site} = replace({Solar Used On-Site}, \",\", \".\"),",
				"          EFEC = replace({EFEC}, \",\", \".\")) ~> CommaToPoint",
				"CommaToPoint derive(Electric = toDouble({Electric}),",
				"          {Natural Gas} = toDouble({Natural Gas}),",
				"          Propane = toDouble({Propane}),",
				"          {Fuel Oil} = toDouble({Fuel Oil}),",
				"          {Solar Used On-Site} = toDouble({Solar Used On-Site}),",
				"          EFEC = toDouble({EFEC})) ~> MakeDouble",
				"DelhaizeEnergy derive(Electric = replace(Electric, \",\", \".\"),",
				"          {Natural Gas} = replace({Natural Gas}, \",\", \".\"),",
				"          Propane = replace({Propane}, \",\", \".\"),",
				"          {Fuel Oil} = replace({Fuel Oil}, \",\", \".\"),",
				"          EFEC = replace({EFEC}, \",\", \".\")) ~> CommaToPoint2",
				"CommaToPoint2 derive(Electric = toDouble(Electric),",
				"          {Natural Gas} = toDouble({Natural Gas}),",
				"          Propane = toDouble({Propane}),",
				"          {Fuel Oil} = toDouble({Fuel Oil}),",
				"          EFEC = toDouble({EFEC})) ~> MakeDouble2",
				"unpivot2 union(byName: true)~> AppendData",
				"AppendData derive(Date = toDate(\"01-10-2021\",'dd-MM-yyyy')) ~> derivedColumn1",
				"derivedColumn2, SelectFacilityData lookup(derivedColumn2@JoinColumn == SelectFacilityData@JoinColumn,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUpFacility",
				"derivedColumn1 derive(JoinColumn = at(split({Facility Name}, ','),1)) ~> derivedColumn2",
				"join1 derive(JoinColumn = at(split({FacilityName}, ','),1)) ~> derivedColumn3",
				"LookupGasId, VirtualEmissionsData lookup(derivedColumn1@Date == VirtualEmissionsData@Date",
				"     && SelectFacilityData@BannerId == VirtualEmissionsData@BannerId",
				"     && PurchasedGasData@PurchasedGasId == VirtualEmissionsData@PurchasedGasId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupPurchasedGas",
				"FacilityData, LocationData join(FacilityData@LocationId == LocationData@LocationId,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join1",
				"derivedColumn3 select(mapColumn(",
				"          FacilityId,",
				"          FacilityName,",
				"          LocationId = FacilityData@LocationId,",
				"          GrossFloorArea,",
				"          AvailableSellingArea,",
				"          FacilityTypeId,",
				"          BannerId,",
				"          FacilitySub,",
				"          LocationId = LocationData@LocationId,",
				"          LocationName,",
				"          LocationAddressLine1,",
				"          LocationCity,",
				"          LocationState,",
				"          LocationZipCode,",
				"          CountryId,",
				"          EgridRegionId,",
				"          LocationNo,",
				"          JoinColumn",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFacilityData",
				"LookUpFacility, PurchasedGasData lookup(EnergyType == PurchasedGasName,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupGasId",
				"LookupPurchasedGas, LookUpEgridId lookup(derivedColumn1@Date == EmissionStartDate",
				"     && VirtualEmissionsData@PurchasedGasId == EmissionFactorData@PurchasedGasId",
				"     && SelectFacilityData@EgridRegionId == EgridRegionData@EgridRegionId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupEmissionFactor",
				"EmissionFactorData, EgridRegionData lookup(EgridRegion == EGridRegionLongName,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUpEgridId",
				"select1 keyGenerate(output(EmissionId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"LookupEmissionFactor select(mapColumn(",
				"          Amount,",
				"          Date = derivedColumn1@Date,",
				"          FacilityId,",
				"          VirtualEmissionId,",
				"          EmissionFactorId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Scope2Emissions',",
				"     recreate:true,",
				"     input(",
				"          Emisison as integer,",
				"          Date as date,",
				"          TotalCo2EEmissionsUnits as integer,",
				"          TotalCo2EEmissionsUomId as integer,",
				"          EmissionFactorId as integer,",
				"          FacilityId as integer,",
				"          VirtualEmissionFactorId as integer",
				"     ),",
				"     mapColumn(",
				"          Emisison = EmissionId,",
				"          Date = derivedColumn1@Date,",
				"          TotalCo2EEmissionsUnits = Amount,",
				"          EmissionFactorId,",
				"          FacilityId,",
				"          VirtualEmissionFactorId = VirtualEmissionId",
				"     )) ~> sink1"
			]
		}
	}
}