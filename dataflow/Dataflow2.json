{
	"name": "Dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AholdEnergy"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "DelhaizeEnergy"
				},
				{
					"name": "FacilityData"
				},
				{
					"name": "VirtualEmissionsData"
				},
				{
					"name": "EmissionFactorData"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "unpivot1"
				},
				{
					"name": "unpivot2"
				},
				{
					"name": "CommaToPoint"
				},
				{
					"name": "MakeDouble"
				},
				{
					"name": "CommaToPoint2"
				},
				{
					"name": "MakeDouble2"
				},
				{
					"name": "AppendData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Facility Name} as string,",
				"          {Location ID} as short,",
				"          {Selling m2} as string,",
				"          {Facility Type} as string,",
				"          Electric as string,",
				"          {Natural Gas} as string,",
				"          Propane as string,",
				"          {Fuel Oil} as string,",
				"          {Solar Used On-Site} as string,",
				"          EFEC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'AholdEnergy.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AholdEnergy",
				"source(output(",
				"          {Facility Name} as string,",
				"          {Location ID} as short,",
				"          {Selling m2} as string,",
				"          {Facility Type} as string,",
				"          Electric as string,",
				"          {Natural Gas} as string,",
				"          Propane as string,",
				"          {Fuel Oil} as string,",
				"          EFEC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'DelhaizeEnergy.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DelhaizeEnergy",
				"source(output(",
				"          FacilityId as integer,",
				"          FacilityName as string,",
				"          LocationId as integer,",
				"          GrossFloorArea as integer,",
				"          AvailableSellingArea as integer,",
				"          FacilityTypeId as integer,",
				"          BannerId as integer,",
				"          FacilitySub as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Facility') ~> FacilityData",
				"source(output(",
				"          VirtualEmissionId as integer,",
				"          PurchasedGasId as integer,",
				"          Date as date,",
				"          VirtualEmissionScope as string,",
				"          BannerId as integer,",
				"          VirtualEmissionFactorLocation as double,",
				"          VirtualEmissionFactorMarket as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'VirtualEmissionFactor') ~> VirtualEmissionsData",
				"source(output(",
				"          EmissionFactorId as integer,",
				"          EmissionFactorName as string,",
				"          EmissionScope as string,",
				"          EmissionCategory as string,",
				"          EmissionFactorLocationBased as double,",
				"          EmissionFactorMarketBased as double,",
				"          UnitOfMeasure as string,",
				"          EmissionStartDate as date,",
				"          EmissionEndDate as date,",
				"          EgridRegion as string,",
				"          PurchasedGasId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'GreenhouseGasType') ~> EmissionFactorData",
				"MakeDouble unpivot(output(",
				"          EnergyType as string,",
				"          Amount as double",
				"     ),",
				"     ungroupBy({Facility Name},",
				"          {Location ID},",
				"          {Selling m2},",
				"          {Facility Type}),",
				"     lateral: true,",
				"     ignoreNullPivots: true) ~> unpivot1",
				"MakeDouble2 unpivot(output(",
				"          EnergyType as string,",
				"          Amount as double",
				"     ),",
				"     ungroupBy({Facility Name},",
				"          {Facility Type},",
				"          {Location ID},",
				"          {Selling m2}),",
				"     lateral: true,",
				"     ignoreNullPivots: true) ~> unpivot2",
				"AholdEnergy derive(Electric = replace({Electric}, \",\", \".\"),",
				"          {Natural Gas} = replace({Natural Gas}, \",\", \".\"),",
				"          Propane = replace({Propane}, \",\", \".\"),",
				"          {Fuel Oil} = replace({Fuel Oil}, \",\", \".\"),",
				"          {Solar Used On-Site} = replace({Solar Used On-Site}, \",\", \".\"),",
				"          EFEC = replace({EFEC}, \",\", \".\")) ~> CommaToPoint",
				"CommaToPoint derive(Electric = toDouble({Electric}),",
				"          {Natural Gas} = toDouble({Natural Gas}),",
				"          Propane = toDouble({Propane}),",
				"          {Fuel Oil} = toDouble({Fuel Oil}),",
				"          {Solar Used On-Site} = toDouble({Solar Used On-Site}),",
				"          EFEC = toDouble({EFEC})) ~> MakeDouble",
				"DelhaizeEnergy derive(Electric = replace(Electric, \",\", \".\"),",
				"          {Natural Gas} = replace({Natural Gas}, \",\", \".\"),",
				"          Propane = replace({Propane}, \",\", \".\"),",
				"          {Fuel Oil} = replace({Fuel Oil}, \",\", \".\"),",
				"          EFEC = replace({EFEC}, \",\", \".\")) ~> CommaToPoint2",
				"CommaToPoint2 derive(Electric = toDouble(Electric),",
				"          {Natural Gas} = toDouble({Natural Gas}),",
				"          Propane = toDouble({Propane}),",
				"          {Fuel Oil} = toDouble({Fuel Oil}),",
				"          EFEC = toDouble({EFEC})) ~> MakeDouble2",
				"unpivot2 union(byName: true)~> AppendData",
				"AppendData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Scope2Emissions') ~> sink1"
			]
		}
	}
}