{
	"name": "Dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AholdEnergy"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "DelhaizeEnergy"
				},
				{
					"name": "FacilityData"
				},
				{
					"name": "VirtualEmissionsData"
				},
				{
					"name": "EmissionFactorData"
				},
				{
					"linkedService": {
						"referenceName": "global-data-modeling-space-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "Facility2Data"
				},
				{
					"name": "BannerData"
				},
				{
					"name": "LocationData"
				},
				{
					"name": "PurchasedGasData"
				},
				{
					"name": "EgridRegionData"
				},
				{
					"name": "CountryData"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "unpivot1"
				},
				{
					"name": "unpivot2"
				},
				{
					"name": "CommaToPoint"
				},
				{
					"name": "MakeDouble"
				},
				{
					"name": "CommaToPoint2"
				},
				{
					"name": "MakeDouble2"
				},
				{
					"name": "AppendData"
				},
				{
					"name": "CreateDate"
				},
				{
					"name": "LookUpFacility"
				},
				{
					"name": "CreateJoinColumn"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "joinLocation"
				},
				{
					"name": "SelectFacilityData"
				},
				{
					"name": "LookupGasId"
				},
				{
					"name": "ChangeColumnName"
				},
				{
					"name": "ChangeColumnName1"
				},
				{
					"name": "SplitForKWHCalc"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "CalculateKWH"
				},
				{
					"name": "CalculateKWH2"
				},
				{
					"name": "AppendKWHs"
				},
				{
					"name": "joinCountry"
				},
				{
					"name": "joinEgrid"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select3"
				},
				{
					"name": "filter1"
				},
				{
					"name": "lookupVirtualEmissions"
				},
				{
					"name": "AdjEnergytype"
				},
				{
					"name": "AdjEnergytype2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Facility Name} as string,",
				"          {Location ID} as short,",
				"          {Selling m2} as string,",
				"          {Facility Type} as string,",
				"          Electric as string,",
				"          {Natural Gas} as string,",
				"          Propane as string,",
				"          {Fuel Oil} as string,",
				"          {Solar Used On-Site} as string,",
				"          EFEC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'AholdEnergy.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AholdEnergy",
				"source(output(",
				"          {Facility Name} as string,",
				"          {Location ID} as short,",
				"          {Selling m2} as string,",
				"          {Facility Type} as string,",
				"          Electric as string,",
				"          {Natural Gas} as string,",
				"          Propane as string,",
				"          {Fuel Oil} as string,",
				"          EFEC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'DelhaizeEnergy.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DelhaizeEnergy",
				"source(output(",
				"          FacilityId as integer,",
				"          FacilityName as string,",
				"          LocationId as integer,",
				"          GrossFloorArea as integer,",
				"          AvailableSellingArea as integer,",
				"          FacilityTypeId as integer,",
				"          BannerId as integer,",
				"          FacilitySub as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Facility') ~> FacilityData",
				"source(output(",
				"          VirtualEmissionId as integer,",
				"          PurchasedGasId as integer,",
				"          Date as date,",
				"          VirtualEmissionScope as string,",
				"          BannerId as integer,",
				"          VirtualEmissionFactorLocation as double,",
				"          VirtualEmissionFactorMarket as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'VirtualEmissionFactor') ~> VirtualEmissionsData",
				"source(output(",
				"          EmissionFactorId as integer,",
				"          EmissionFactorName as string,",
				"          EmissionCategory as string,",
				"          EmissionScope as string,",
				"          EmissionFactorLocationBased as double,",
				"          EmissionFactorMarketBased as double,",
				"          UnitOfMeasure as string,",
				"          EmissionStartDate as date,",
				"          EmissionEndDate as date,",
				"          EgridRegion as string,",
				"          PurchasedGasId as integer,",
				"          EmissionCountry as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'EmissionFactors') ~> EmissionFactorData",
				"source(output(",
				"          Company as string,",
				"          Region as string,",
				"          OpCo as string,",
				"          Brand as string,",
				"          {Facility Type} as string,",
				"          {Facility ID} as short,",
				"          {Facility Name} as string,",
				"          Address as string,",
				"          City as string,",
				"          {State } as string,",
				"          Country as string,",
				"          {Postal Code} as string,",
				"          {Gross area owned stores ft2} as integer,",
				"          {Sales area owned stores ft2} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'fsgdmsdevweeu01',",
				"     folderPath: 'ESG_MAPDATA',",
				"     fileName: 'Facility.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> Facility2Data",
				"source(output(",
				"          BannerId as integer,",
				"          BannerName as string,",
				"          OrganizationId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Banner') ~> BannerData",
				"source(output(",
				"          LocationId as integer,",
				"          LocationName as string,",
				"          LocationAddressLine1 as string,",
				"          LocationCity as string,",
				"          LocationState as string,",
				"          LocationZipCode as string,",
				"          CountryId as integer,",
				"          EgridRegionId as integer,",
				"          LocationNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Location') ~> LocationData",
				"source(output(",
				"          PurchasedGasId as integer,",
				"          PurchasedGasName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'PurchasedGas') ~> PurchasedGasData",
				"source(output(",
				"          EgridRegionId as integer,",
				"          EgridRegionName as string,",
				"          EGridRegionLongName as string,",
				"          EgridZipcode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'EgridRegions') ~> EgridRegionData",
				"source(output(",
				"          CountryId as integer,",
				"          IsoCountryName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Country') ~> CountryData",
				"MakeDouble unpivot(output(",
				"          EnergyType as string,",
				"          Amount as double",
				"     ),",
				"     ungroupBy({Facility Name},",
				"          {Location ID},",
				"          {Selling m2},",
				"          {Facility Type}),",
				"     lateral: true,",
				"     ignoreNullPivots: true) ~> unpivot1",
				"MakeDouble2 unpivot(output(",
				"          EnergyType as string,",
				"          Amount as double",
				"     ),",
				"     ungroupBy({Facility Name},",
				"          {Facility Type},",
				"          {Location ID},",
				"          {Selling m2}),",
				"     lateral: true,",
				"     ignoreNullPivots: true) ~> unpivot2",
				"ChangeColumnName derive(Electricity = replace(Electricity, \",\", \".\"),",
				"          {Natural Gas} = replace({Natural Gas}, \",\", \".\"),",
				"          Propane = replace(Propane, \",\", \".\"),",
				"          {Heat import} = replace({Heat import}, \",\", \".\"),",
				"          {Solar Used On-Site} = replace({Solar Used On-Site}, \",\", \".\"),",
				"          EFEC = replace(EFEC, \",\", \".\")) ~> CommaToPoint",
				"CommaToPoint derive(Electricity = toDouble(Electricity),",
				"          {Natural Gas} = toDouble({Natural Gas}),",
				"          Propane = toDouble(Propane),",
				"          {Heat import} = toDouble({Heat import}),",
				"          {Solar Used On-Site} = toDouble({Solar Used On-Site}),",
				"          EFEC = toDouble(EFEC)) ~> MakeDouble",
				"ChangeColumnName1 derive(Electricity = replace(Electricity, \",\", \".\"),",
				"          {Natural Gas} = replace({Natural Gas}, \",\", \".\"),",
				"          Propane = replace(Propane, \",\", \".\"),",
				"          {Heat import} = replace({Heat import}, \",\", \".\"),",
				"          EFEC = replace(EFEC, \",\", \".\")) ~> CommaToPoint2",
				"CommaToPoint2 derive(Electricity = toDouble(Electricity),",
				"          {Natural Gas} = toDouble({Natural Gas}),",
				"          Propane = toDouble(Propane),",
				"          {Heat import} = toDouble({Heat import}),",
				"          EFEC = toDouble(EFEC)) ~> MakeDouble2",
				"AdjEnergytype2, AdjEnergytype union(byName: true)~> AppendData",
				"AppendKWHs derive(Date = toDate(\"01-10-2021\",'dd-MM-yyyy')) ~> CreateDate",
				"CreateJoinColumn, SelectFacilityData lookup(CreateJoinColumn@JoinColumn == SelectFacilityData@JoinColumn,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUpFacility",
				"CreateDate derive(JoinColumn = at(split({Facility Name}, ','),1)) ~> CreateJoinColumn",
				"joinCountry derive(JoinColumn = at(split({FacilityName}, ','),1)) ~> derivedColumn3",
				"FacilityData, LocationData join(FacilityData@LocationId == LocationData@LocationId,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinLocation",
				"derivedColumn3 select(mapColumn(",
				"          FacilityId,",
				"          FacilityName,",
				"          LocationId = FacilityData@LocationId,",
				"          GrossFloorArea,",
				"          AvailableSellingArea,",
				"          FacilityTypeId,",
				"          BannerId,",
				"          LocationId = LocationData@LocationId,",
				"          LocationName,",
				"          LocationZipCode,",
				"          EgridRegionId = LocationData@EgridRegionId,",
				"          EGridRegionLongName,",
				"          LocationNo,",
				"          JoinColumn,",
				"          Country = IsoCountryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFacilityData",
				"LookUpFacility, PurchasedGasData lookup(EnergyType == PurchasedGasName,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupGasId",
				"AholdEnergy select(mapColumn(",
				"          {Facility Name},",
				"          {Location ID},",
				"          {Selling m2},",
				"          {Facility Type},",
				"          Electricity = Electric,",
				"          {Natural Gas},",
				"          Propane,",
				"          {Heat import} = {Fuel Oil},",
				"          {Solar Used On-Site},",
				"          EFEC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnName",
				"DelhaizeEnergy select(mapColumn(",
				"          {Facility Name},",
				"          {Location ID},",
				"          {Selling m2},",
				"          {Facility Type},",
				"          Electricity = Electric,",
				"          {Natural Gas},",
				"          Propane,",
				"          {Heat import} = {Fuel Oil},",
				"          EFEC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnName1",
				"derivedColumn4 split(case(IsKwh == \"Yes\",true()),",
				"     disjoint: false) ~> SplitForKWHCalc@(KWH, Therms)",
				"filter1 derive(IsKwh = case(\r",
				"    EnergyType == \"Electricity\", \"Yes\",\r",
				"    EnergyType == \"EFEC\", \"Yes\", \r",
				"    EnergyType == \"Solar Used On-Site\", \"Yes\",\r",
				"    EnergyType == \"Propane\", \"No\",\r",
				"    EnergyType == \"Natural Gas\", \"No\",\r",
				"    EnergyType == \"Light fuel [kg CO2/kWh]\", \"No\"\r",
				"    )) ~> derivedColumn4",
				"SplitForKWHCalc@KWH derive(KWHAmount = Amount) ~> CalculateKWH",
				"SplitForKWHCalc@Therms derive(KWHAmount = Amount *29.3297) ~> CalculateKWH2",
				"CalculateKWH, CalculateKWH2 union(byName: true)~> AppendKWHs",
				"joinEgrid, CountryData join(LocationData@CountryId == CountryData@CountryId,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinCountry",
				"joinLocation, EgridRegionData join(LocationData@EgridRegionId == EgridRegionData@EgridRegionId,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinEgrid",
				"select3 keyGenerate(output(EmissionId as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"lookupVirtualEmissions select(mapColumn(",
				"          {Facility Name},",
				"          EnergyType,",
				"          Amount,",
				"          IsKwh,",
				"          KWHAmount,",
				"          Date = VirtualEmissionsData@Date,",
				"          FacilityId,",
				"          VirtualEmissionId,",
				"          PurchasedGasId = VirtualEmissionsData@PurchasedGasId,",
				"          PurchasedGasName,",
				"          Adj_EnergyType",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"AppendData filter(Amount != 0.0) ~> filter1",
				"LookupGasId, VirtualEmissionsData lookup(SelectFacilityData@BannerId == VirtualEmissionsData@BannerId",
				"     && PurchasedGasData@PurchasedGasId == VirtualEmissionsData@PurchasedGasId",
				"     && CreateDate@Date == VirtualEmissionsData@Date,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupVirtualEmissions",
				"unpivot1 derive(Adj_EnergyType = case(EnergyType == \"EFEC\",\"Electricity\",EnergyType)) ~> AdjEnergytype",
				"unpivot2 derive(Adj_EnergyType = case(EnergyType == \"EFEC\",\"Electricity\",EnergyType)) ~> AdjEnergytype2",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'ESGNORMALIZEDMODEL',",
				"     tableName: 'Scope2Emissions',",
				"     recreate:true,",
				"     input(",
				"          EmissionId as integer,",
				"          EmissionDate as date,",
				"          EmissionsUnitsKwH as double,",
				"          EmissionFactorId as integer,",
				"          FacilityId as integer,",
				"          VirtualEmissionFactorId as integer,",
				"          PurchasedGasId as integer,",
				"          EnergyType as string,",
				"          EmissionUnits as double,",
				"          EnergyTypeAdj as string",
				"     ),",
				"     mapColumn(",
				"          EmissionId,",
				"          EmissionDate = Date,",
				"          EmissionsUnitsKwH = KWHAmount,",
				"          FacilityId,",
				"          PurchasedGasId,",
				"          EnergyType = PurchasedGasName,",
				"          EnergyTypeAdj = Adj_EnergyType,",
				"          VirtualEmissionFactorId = VirtualEmissionId",
				"     )) ~> sink1"
			]
		}
	}
}